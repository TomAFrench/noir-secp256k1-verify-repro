use dep::std;


fn validateSignature(
    publicKeyX: [u8; 32],
    publicKeyY: [u8; 32],
    signature: [u8; 64] ,
    message: [u8; 32]
) -> bool {
    let validSignature = std::ecdsa_secp256k1::verify_signature(publicKeyX, publicKeyY, signature, message);
    validSignature
}

fn main(
    publicKeyX: [u8; 32],
    publicKeyY: [u8; 32],
    signature: [u8; 64] ,
    message: [u8; 32]
) {
    
    let valid_signature = validateSignature(publicKeyX, publicKeyY, signature, message);
    assert(valid_signature);
}




#[test]
fn test_main() {
    main(
    [145,7,61,84,21,147,70,213,213,228,87,25,211,212,235,102,143,215,59,15,24,4,106,23,1,248,163,180,196,254,214,212], 
[241,7,119,26,119,10,46,247,145,181,77,166,112,94,4,158,229,38,252,43,221,87,74,88,66,249,73,236,86,30,113,179], 
[11, 81, 40, 151, 7, 0, 24, 172, 53, 249, 94, 216, 87, 183, 198, 129, 222, 124, 158, 77, 15, 43, 158, 53, 129, 107, 229, 139, 92, 124, 76, 223, 228, 60, 163, 251, 149, 150, 215, 232, 46, 199, 80, 42, 240, 117, 199, 17, 193, 202, 94, 252, 202, 184, 31, 45, 81, 113, 116, 105, 152, 188, 223, 158], 
[159,134,208,129,136,76,125,101,154,47,234,160,197,90,208,21,163,191,79,27,43,11,130,44,209,93,108,21,176,240,10,8],     );
    
}



#[test]

fn test_valid_signature() {
    let result = validateSignature(
    [145,7,61,84,21,147,70,213,213,228,87,25,211,212,235,102,143,215,59,15,24,4,106,23,1,248,163,180,196,254,214,212], 
[241,7,119,26,119,10,46,247,145,181,77,166,112,94,4,158,229,38,252,43,221,87,74,88,66,249,73,236,86,30,113,179], 
[11, 81, 40, 151, 7, 0, 24, 172, 53, 249, 94, 216, 87, 183, 198, 129, 222, 124, 158, 77, 15, 43, 158, 53, 129, 107, 229, 139, 92, 124, 76, 223, 228, 60, 163, 251, 149, 150, 215, 232, 46, 199, 80, 42, 240, 117, 199, 17, 193, 202, 94, 252, 202, 184, 31, 45, 81, 113, 116, 105, 152, 188, 223, 158], 
[159,134,208,129,136,76,125,101,154,47,234,160,197,90,208,21,163,191,79,27,43,11,130,44,209,93,108,21,176,240,10,8],     );
    std::println(result);
    assert(result == true);
}
